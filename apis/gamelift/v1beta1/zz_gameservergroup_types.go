/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoScalingPolicyObservation struct {
}

type AutoScalingPolicyParameters struct {

	// Length of time, in seconds, it takes for a new instance to start
	// new game server processes and register with GameLift FleetIQ.
	// Specifying a warm-up time can be useful, particularly with game servers that take a long time to start up,
	// because it avoids prematurely starting new instances. Defaults to 60.
	// +kubebuilder:validation:Optional
	EstimatedInstanceWarmup *float64 `json:"estimatedInstanceWarmup,omitempty" tf:"estimated_instance_warmup,omitempty"`

	// +kubebuilder:validation:Required
	TargetTrackingConfiguration []TargetTrackingConfigurationParameters `json:"targetTrackingConfiguration" tf:"target_tracking_configuration,omitempty"`
}

type GameServerGroupObservation struct {

	// The ARN of the GameLift Game Server Group.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The ARN of the created EC2 Auto Scaling group.
	AutoScalingGroupArn *string `json:"autoScalingGroupArn,omitempty" tf:"auto_scaling_group_arn,omitempty"`

	// A unique identifier for an existing EC2 launch template.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type GameServerGroupParameters struct {

	// +kubebuilder:validation:Optional
	AutoScalingPolicy []AutoScalingPolicyParameters `json:"autoScalingPolicy,omitempty" tf:"auto_scaling_policy,omitempty"`

	// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances.
	// Valid values: SPOT_ONLY, SPOT_PREFERRED, ON_DEMAND_ONLY. Defaults to SPOT_PREFERRED.
	// +kubebuilder:validation:Optional
	BalancingStrategy *string `json:"balancingStrategy,omitempty" tf:"balancing_strategy,omitempty"`

	// Indicates whether instances in the game server group are protected from early termination.
	// Unprotected instances that have active game servers running might be terminated during a scale-down event,
	// causing players to be dropped from the game.
	// Protected instances cannot be terminated while there are active game servers running except in the event
	// of a forced game server group deletion.
	// Valid values: NO_PROTECTION, FULL_PROTECTION. Defaults to NO_PROTECTION.
	// +kubebuilder:validation:Optional
	GameServerProtectionPolicy *string `json:"gameServerProtectionPolicy,omitempty" tf:"game_server_protection_policy,omitempty"`

	// +kubebuilder:validation:Required
	InstanceDefinition []InstanceDefinitionParameters `json:"instanceDefinition" tf:"instance_definition,omitempty"`

	// +kubebuilder:validation:Required
	LaunchTemplate []LaunchTemplateParameters `json:"launchTemplate" tf:"launch_template,omitempty"`

	// The maximum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum.
	// +kubebuilder:validation:Required
	MaxSize *float64 `json:"maxSize" tf:"max_size,omitempty"`

	// The minimum number of instances allowed in the EC2 Auto Scaling group.
	// During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum.
	// +kubebuilder:validation:Required
	MinSize *float64 `json:"minSize" tf:"min_size,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// ARN for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// Reference to a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// Selector for a Role in iam to populate roleArn.
	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of VPC subnets to use with instances in the game server group.
	// By default, all GameLift FleetIQ-supported Availability Zones are used.
	// +kubebuilder:validation:Optional
	VPCSubnets []*string `json:"vpcSubnets,omitempty" tf:"vpc_subnets,omitempty"`
}

type InstanceDefinitionObservation struct {
}

type InstanceDefinitionParameters struct {

	// An EC2 instance type.
	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`

	// Instance weighting that indicates how much this instance type contributes
	// to the total capacity of a game server group.
	// Instance weights are used by GameLift FleetIQ to calculate the instance type's cost per unit hour and better identify
	// the most cost-effective options.
	// +kubebuilder:validation:Optional
	WeightedCapacity *string `json:"weightedCapacity,omitempty" tf:"weighted_capacity,omitempty"`
}

type LaunchTemplateObservation struct {
}

type LaunchTemplateParameters struct {

	// A unique identifier for an existing EC2 launch template.
	// +crossplane:generate:reference:type=github.com/upbound/provider-aws/apis/ec2/v1beta1.LaunchTemplate
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Reference to a LaunchTemplate in ec2 to populate id.
	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// Selector for a LaunchTemplate in ec2 to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`

	// A readable identifier for an existing EC2 launch template.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The version of the EC2 launch template to use. If none is set, the default is the first version created.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TargetTrackingConfigurationObservation struct {
}

type TargetTrackingConfigurationParameters struct {

	// Desired value to use with a game server group target-based scaling policy.
	// +kubebuilder:validation:Required
	TargetValue *float64 `json:"targetValue" tf:"target_value,omitempty"`
}

// GameServerGroupSpec defines the desired state of GameServerGroup
type GameServerGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GameServerGroupParameters `json:"forProvider"`
}

// GameServerGroupStatus defines the observed state of GameServerGroup.
type GameServerGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GameServerGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GameServerGroup is the Schema for the GameServerGroups API. Provides a GameLift Game Server Group resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GameServerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GameServerGroupSpec   `json:"spec"`
	Status            GameServerGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GameServerGroupList contains a list of GameServerGroups
type GameServerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GameServerGroup `json:"items"`
}

// Repository type metadata.
var (
	GameServerGroup_Kind             = "GameServerGroup"
	GameServerGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GameServerGroup_Kind}.String()
	GameServerGroup_KindAPIVersion   = GameServerGroup_Kind + "." + CRDGroupVersion.String()
	GameServerGroup_GroupVersionKind = CRDGroupVersion.WithKind(GameServerGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&GameServerGroup{}, &GameServerGroupList{})
}
